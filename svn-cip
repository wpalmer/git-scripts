#!/bin/bash
# svn-cip, an svn equivalent for git add --patch
# Usage:
#  svn-cip <file> [<file> [...]]

# look through all files and determine topmost directory
function longest_common_prefix(){
	perl /dev/fd/3 "$1" 3<<-'PERL'
		#!/usr/bin/perl
		use strict;
		my $delim = $ARGV[0];

		my $common = undef;
		binmode STDIN;
		$/ = "\0";
		STRING: while(<STDIN>){ chomp;
			my @parts = split( $delim );
			my $string = '';
			my @candidate_prefixes = ($delim);
			foreach my $part (@parts) {
				if( $part eq "" ){ next; }
				$string = $string . $delim . $part;
				push @candidate_prefixes, $string;
			}
			foreach my $candidate_prefix (reverse @candidate_prefixes){
				if(
					!defined($common) ||
					$candidate_prefix eq $delim ||
					$candidate_prefix eq $common ||
					(
						length($candidate_prefix.$delim) <= length($common) &&
						substr($common, 0, length($candidate_prefix)+1) eq $candidate_prefix.$delim
					)
				){
					$common = $candidate_prefix;
					next STRING;
				}
			}
		}
		if( !defined($common) ){
			exit(1);
		}
		print $common;
		exit(0);
	PERL
}

files=()
if [ $# -eq 0 ]; then
    parent="$(readlink -fn .)"
    [ -d "$parent/.svn" ] || {
        echo "Not an SVN directory." >&2
        exit 1
    }

    while [ -d "$parent/.svn" ]; do
        top="$parent"
        parent="$(dirname "$parent")"
    done
    cd "$top"
    oldIFS="$IFS"
    IFS=$'\n'
    files=( $(svn st | sed -n 's/^M.......//p') ) || exit 1
    IFS="$oldIFS"
else
    files=("$@")
fi

common="$(for file in "${files[@]}"; do
	readlink -fn "$file"
	echo -en '\0'
done | longest_common_prefix /)"
common="$(
    parent="$(dirname "$common")"
    while [ -d "$parent/.svn" ]; do
        common="$parent"
        parent="$(dirname "$common")"
    done
    echo "$common"
)"

[ -d $common ] || common="$(dirname "$common")"

GIT_DIR="$(mktemp -d)" || exit 1
function _cleanup(){
	rm -rf "$GIT_DIR"
}
trap _cleanup EXIT SIGHUP SIGINT SIGQUIT SIGTERM || exit 1

GIT_WORK_TREE="$common"
export GIT_DIR
export GIT_WORK_TREE
git init --quiet || exit 1

function filepaths(){
    local file
    local prefix
    for file in "$@"; do
        file="$(readlink -fn "$file")"
        if [ "$common" = "/" ]; then
            file="${file:1}"
        else
            prefix="$common/"
            file="${file:${#prefix}}"
        fi
        echo -n "$file"
        echo -en '\0'
    done | sort -rz
}

function hash_svn_base(){
    local filepath="$1"
    svn cat -rBASE "$filepath" | git hash-object -t blob -w --stdin
}

function hash_file(){
    local filepath="$1"
    cat "$filepath" | git hash-object -t blob -w --stdin
}

function update_index(){
    local callback="$1"
    local file="$2"

    hash="$("$callback" "$common/$file")"
    git update-index --add --cacheinfo '100644' "$hash" "$file" || exit 1
}

filepaths "${files[@]}" | while read -d $'\0' file; do
    update_index hash_svn_base "$file" || exit 1
done &&
git reset -q "$(
    {
        sed 's/^\s*//' <<COMMIT
            tree $(git write-tree)
            author nobody <nobody@nowhere> $(date +'%s %z')
            committer nobody <nobody@nowhere> $(date +'%s %z')

            BASE
COMMIT
    } | git hash-object -t commit -w --stdin
)" &&
git tag base &&
git add --patch &&
git reset -q "$(
    {
        sed 's/^\s*//' <<COMMIT
            tree $(git write-tree)
            parent $(git rev-parse refs/tags/base)
            author nobody <nobody@nowhere> $(date +'%s %z')
            committer nobody <nobody@nowhere> $(date +'%s %z')

            PARTIAL
COMMIT
    } | git hash-object -t commit -w --stdin
)" &&
git tag partial &&
filepaths "${files[@]}" | while read -d $'\0' file; do
    update_index hash_file "$file" || exit 1
done &&
git reset -q "$(
    {
        sed 's/^\s*//' <<COMMIT
            tree $(git write-tree)
            parent $(git rev-parse refs/tags/base)
            author nobody <nobody@nowhere> $(date +'%s %z')
            committer nobody <nobody@nowhere> $(date +'%s %z')

            FULL
COMMIT
    } | git hash-object -t commit -w --stdin
)" &&
git tag full || exit 1

if git diff --quiet refs/tags/base refs/tags/partial; then
    echo "No changes to commit." >&2
    exit 1
fi

#confirm with user that this is ok, eg: output diffs which will actually be sent
while true; do
    read -p 'Are you sure you wish to continue [y,n,a,r,q,e,?]? ' response
    case "$response" in
        y|ye|yes)
            if git diff --quiet refs/tags/base refs/tags/partial; then
                echo "No changes to commit." >&2
                exit 1
            fi
            break
            ;;
        n|no|q|qu|qui|quit)
            exit 0
            ;;
        e|ex|exa|exam|exami|examin|examine)
            if git diff --quiet refs/tags/base refs/tags/partial; then
                echo "No changes to commit."
            else
                git diff refs/tags/base refs/tags/partial
            fi
            continue
            ;;
        r|re|rem|remo|remov|remove)
            git reset -q refs/tags/partial &&
            git reset -q --soft refs/tags/base &&
            git reset --patch &&
            git reset -q "$(
                {
                    sed 's/^\s*//' <<COMMIT
                        tree $(git write-tree)
                        parent $(git rev-parse refs/tags/base)
                        author nobody <nobody@nowhere> $(date +'%s %z')
                        committer nobody <nobody@nowhere> $(date +'%s %z')

                        PARTIAL
COMMIT
                } | git hash-object -t commit -w --stdin
            )" &&
            git update-ref refs/tags/partial HEAD || exit 1
            continue
            ;;
        a|ad|add)
            git reset -q refs/tags/partial &&
            git reset -q --soft refs/tags/base &&
            git add --patch &&
            git reset -q "$(
                {
                    sed 's/^\s*//' <<COMMIT
                        tree $(git write-tree)
                        parent $(git rev-parse refs/tags/base)
                        author nobody <nobody@nowhere> $(date +'%s %z')
                        committer nobody <nobody@nowhere> $(date +'%s %z')

                        PARTIAL
COMMIT
                } | git hash-object -t commit -w --stdin
            )" &&
            git update-ref refs/tags/partial HEAD || exit 1
            continue
            ;;
        *)
            sed 's/^\s*//' <<HELP
                y - yes, commit changes to svn
                n - no, exit
                a - add more changes to the commit
                r - remove changes from the commit
                q - quit (same as "no")
                e - examine changes to be committed
                ? - print help
HELP
    esac
done

function _restore(){
    git reset -q --hard refs/tags/full &&
    _cleanup
}
trap _restore EXIT SIGHUP SIGINT SIGQUIT SIGTERM || exit 1

git reset -q --hard refs/tags/partial || exit 1
svn commit "$@" || exit 1
exit 0
